{
	"info": {
		"_postman_id": "590114fe-8230-4d5b-809b-ce4c02f81ff4",
		"name": "Alten E-commerce API",
		"description": "Collection pour tester l'API Alten E-commerce",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1342112"
	},
	"item": [
		{
			"name": "Get All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Products have required fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if (jsonData.length > 0) {\r",
							"        pm.expect(jsonData[0]).to.have.property('id');\r",
							"        pm.expect(jsonData[0]).to.have.property('name');\r",
							"        pm.expect(jsonData[0]).to.have.property('price');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Product with ID 1000 exists\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var productExists = jsonData.some(function(product) {\r",
							"        return product.id === 1000;\r",
							"    });\r",
							"\r",
							"    pm.expect(productExists).to.be.true;\r",
							"\r",
							"    if (productExists) {\r",
							"        var product = jsonData.find(function(p) {\r",
							"            return p.id === 1000;\r",
							"        });\r",
							"\r",
							"        pm.expect(product).to.have.property('name');\r",
							"        pm.expect(product).to.have.property('price');\r",
							"        // Ajoutez d'autres vérifications spécifiques si nécessaire\r",
							"        console.log(\"Product with ID 1000:\", product);\r",
							"    } else {\r",
							"        console.log(\"Product with ID 1000 not found\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test pour vérifier le code de statut\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test pour vérifier que la réponse est au format JSON\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Test pour vérifier la structure et le contenu du produit\r",
							"pm.test(\"Product has correct structure and data\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Vérifier que toutes les propriétés attendues sont présentes\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('price');\r",
							"    pm.expect(jsonData).to.have.property('category');\r",
							"    pm.expect(jsonData).to.have.property('inventoryStatus');\r",
							"\r",
							"    // Vérifier que l'ID dans la réponse correspond à l'ID demandé\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.variables.get(\"id\")));\r",
							"\r",
							"    // Vérifier les types de données\r",
							"    pm.expect(jsonData.id).to.be.a('number');\r",
							"    pm.expect(jsonData.name).to.be.a('string');\r",
							"    pm.expect(jsonData.description).to.be.a('string');\r",
							"    pm.expect(jsonData.price).to.be.a('number');\r",
							"    pm.expect(jsonData.category).to.be.a('string');\r",
							"    pm.expect(jsonData.inventoryStatus).to.be.a('string');\r",
							"\r",
							"    // Vérifier que le statut d'inventaire est valide\r",
							"    pm.expect(['INSTOCK', 'LOWSTOCK', 'OUTOFSTOCK']).to.include(jsonData.inventoryStatus);\r",
							"\r",
							"    // Afficher les détails du produit dans la console pour une inspection facile\r",
							"    console.log(\"Product details:\", jsonData);\r",
							"});\r",
							"\r",
							"// Test pour vérifier la performance (temps de réponse)\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Nouveau Produit\",\n    \"price\": 99.99,\n    \"description\": \"Description du nouveau produit\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Produit Mis à Jour\",\n    \"price\": 109.99,\n    \"description\": \"Description mise à jour\"\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Product",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"price\": 119.99\n}"
				},
				"url": {
					"raw": "http://localhost:3000/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products/{{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1000",
			"type": "string"
		}
	]
}